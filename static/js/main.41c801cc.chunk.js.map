{"version":3,"sources":["app/hooks.ts","features/counter/counterSlice.ts","app/helper.ts","features/counter/Counter.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","features/counter/Counter.module.css"],"names":["useAppSelector","useSelector","initialState","bank","value","amount","creditCard","message","undefined","bankAmount","creditCardAmount","counterSlice","createSlice","name","reducers","hideMessage","state","paymentOperation","action","isNaN","payload","sum","bankCurrency","requestedCash","resultBills","i","length","findBankAmount","actions","selectMessage","counter","Counter","dispatch","useDispatch","useState","inputAmount","setInputAmount","className","styles","column","textbox","placeholder","onChange","e","target","button","onClick","requestedAmount","Number","handleOnClick","App","store","configureStore","reducer","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"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","file":"static/js/main.41c801cc.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { findBankAmount } from \"../../app/helper\";\nimport { RootState } from \"../../app/store\";\n\nexport type Currency = {\n  value: number;\n  amount: number;\n};\nexport type CounterState = {\n  bank: Currency[];\n  creditCard: Currency[];\n  message: string | undefined;\n  bankAmount: number;\n  creditCardAmount: number;\n};\n\nconst initialState: CounterState = {\n  bank: [\n    {\n      value: 5000,\n      amount: 4,\n    },\n    {\n      value: 2000,\n      amount: 6,\n    },\n    {\n      value: 1000,\n      amount: 9,\n    },\n    {\n      value: 500,\n      amount: 8,\n    },\n    {\n      value: 200,\n      amount: 2,\n    },\n    {\n      value: 100,\n      amount: 5,\n    },\n  ],\n\n  creditCard: [\n    {\n      value: 5000,\n      amount: 0,\n    },\n    {\n      value: 2000,\n      amount: 1,\n    },\n    {\n      value: 1000,\n      amount: 4,\n    },\n    {\n      value: 500,\n      amount: 0,\n    },\n    {\n      value: 200,\n      amount: 0,\n    },\n    {\n      value: 100,\n      amount: 2,\n    },\n  ],\n  message: undefined,\n  bankAmount: 45900,\n  creditCardAmount: 6200,\n};\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    hideMessage: (state) => {\n      state.message = undefined;\n    },\n    paymentOperation: (state, action: PayloadAction<number>) => {\n      if (isNaN(action.payload) || action.payload === null) {\n        state.message = \"Введите корректное значение.\";\n        return;\n      }\n      if (action.payload > state.creditCardAmount) {\n        state.message = \"Недостаточно средств на карте. Введите другую сумму.\";\n        return;\n      }\n      if (action.payload > state.bankAmount) {\n        state.message =\n          \"Операция не может быть выполнена. Введите другую сумму.\";\n        return;\n      }\n      let sum = findBankAmount(state.bank, action.payload);\n      if (!sum.length) {\n        state.message = \"Недостаточно средств/купюр в банкомате\";\n        return;\n      }\n      for (let i = 0; i < sum.length; i++) {\n        state.bank[i].amount -= sum[i].amount;\n        state.creditCard[i].amount += sum[i].amount;\n      }\n      state.message = \"Операция прошла успешно.\";\n    },\n  },\n});\n\nexport const { hideMessage, paymentOperation } = counterSlice.actions;\n\nexport const selectMessage = (state: RootState) => state.counter.message;\nexport const selectBank = (state: RootState) => state.counter.bank;\n\nexport default counterSlice.reducer;\n","import { Currency } from \"../features/counter/counterSlice\";\n\nexport function findBankAmount(\n  bankCurrency: Currency[],\n  requestedCash: number\n) {\n  let resultBills: Currency[] = [\n    {\n      value: 5000,\n      amount: 0,\n    },\n    {\n      value: 2000,\n      amount: 0,\n    },\n    {\n      value: 1000,\n      amount: 0,\n    },\n    {\n      value: 500,\n      amount: 0,\n    },\n    {\n      value: 200,\n      amount: 0,\n    },\n    {\n      value: 100,\n      amount: 0,\n    },\n  ];\n\n  for (let i = 0; i < bankCurrency.length; i++) {\n    while (\n      requestedCash >= bankCurrency[i].value &&\n      bankCurrency[i].amount > resultBills[i].amount\n    ) {\n      resultBills[i].amount++;\n      requestedCash = requestedCash - bankCurrency[i].value;\n    }\n  }\n  if (requestedCash > 0) return [];\n  return resultBills;\n}\n","import React, { useState } from \"react\";\n\nimport { useAppSelector, useAppDispatch } from \"../../app/hooks\";\nimport { hideMessage, selectMessage, paymentOperation } from \"./counterSlice\";\nimport styles from \"./Counter.module.css\";\nexport function Counter() {\n  const dispatch = useAppDispatch();\n  const [inputAmount, setInputAmount] = useState(\"\");\n  const message = useAppSelector(selectMessage);\n\n  const handleOnClick = () => {\n    const requestedAmount = Number(inputAmount);\n    dispatch(paymentOperation(requestedAmount));\n    setInputAmount(\"\");\n  };\n\n  const handleOnChange = (value: string) => {\n    if (message) dispatch(hideMessage());\n\n    setInputAmount(value);\n  };\n\n  return (\n    <div>\n      <div className={styles.column}>\n        <input\n          className={styles.textbox}\n          aria-label=\"Set amount\"\n          value={inputAmount}\n          placeholder=\"Введите сумму\"\n          onChange={(e) => handleOnChange(e.target.value)}\n        />\n        <button className={styles.button} onClick={() => handleOnClick()}>\n          Получить наличные\n        </button>\n\n        {message && <div>{message}</div>}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Counter } from \"./features/counter/Counter\";\n\nfunction App() {\n  return (\n    <div>\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"column\":\"Counter_column__ROwHq\",\"value\":\"Counter_value__1d0te\",\"button\":\"Counter_button__1xpSV\",\"textbox\":\"Counter_textbox__3ODaX\",\"asyncButton\":\"Counter_asyncButton__2UAr3 Counter_button__1xpSV\"};"],"sourceRoot":""}